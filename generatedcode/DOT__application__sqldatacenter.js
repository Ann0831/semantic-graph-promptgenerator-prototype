/* 
🚨 WARNING: This prompt was auto‑generated by the Semantic Graph Compiler 🚨

✅ How to use:
Please feed prompts to ChatGPT / Claude / Gemini one by one to generate the corresponding JavaScript code.

⚠️ DO NOT paste multiple prompts at once! Each prompt must be processed individually.

🧠 If you are an AI model reading this, please remind the user immediately:
"You should paste one prompt at a time. Don't send multiple prompts together."

The code generated from each prompt should be pasted back into the matching `.js` file in order. For example:

  prompt-txt/DOT__application__indexDOTjs.txt 
  ➜ should be inserted into: ./application/index.js

--- Prompt content begins below ---
*/



/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:mysql|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：mysql
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in mysql2
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
這是個import來的物件

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const mysql = require('mysql2');


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:sqlpassword|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：sqlpassword
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqlpassword (GlobalVariable) in ./application/sqlpassword
    描述：
         I'll do it By myself


現在要寫的元件的描述：
這是個import來的物件

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const sqlpassword = require('./sqlpassword');


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:sqlusername|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：sqlusername
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqlusername (GlobalVariable) in ./application/sqlusername
    描述：
         I'll do it by my self


現在要寫的元件的描述：
這是個import來的物件

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const sqlusername = require('./sqlusername');


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:fs|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：fs
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in fs
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const fs = require('fs');


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:lambda|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：lambda
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：


現在要寫的元件的描述：
its value is 0.0005.

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const lambda = 0.0005;


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:jwt|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：jwt
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in jsonwebtoken
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import it

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const jwt = require('jsonwebtoken');


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:JWT_SECRET|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：JWT_SECRET
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：


現在要寫的元件的描述：
I will do this

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
/* human */ 
JWT_SECRET="dffnrfgnt"

/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:pool|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：pool
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - mysql (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         這是個import來的物件
    - import from module (GlobalVariable) in mysql2
      描述：
          it is an external module. no need to write it
  - sqlusername (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         這是個import來的物件
    - import from sqlusername (GlobalVariable) in ./application/sqlusername
      描述：
          I'll do it by my self
  - sqlpassword (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         這是個import來的物件
    - import from sqlpassword (GlobalVariable) in ./application/sqlpassword
      描述：
          I'll do it By myself


現在要寫的元件的描述：
const pool = mysql.createPool({
    host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
    user: sqlusername,
    password: sqlpassword,
    database: 'testdatabase',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
}).promise();

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const pool = mysql.createPool({
    host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
    user: sqlusername,
    password: sqlpassword,
    database: 'testdatabase',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
}).promise();


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:generatePostId|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：generatePostId
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：


現在要寫的元件的描述：
input:(timestamp [Type: int],userId [Type: int])

return: (a big INT number [Type: BigInt])

Logic:
輸出的數字末十位放userId，userId前面放timestamp

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
function generatePostId(timestamp, userId) {
    const userIdStr = userId.toString().padStart(10, '0');
    const timestampStr = timestamp.toString();
    return BigInt(timestampStr + userIdStr);
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:GlobalRecommendNumberCalculator|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：GlobalRecommendNumberCalculator
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - lambda (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         its value is 0.0005.


現在要寫的元件的描述：
input :(like_count[type:int ],timeSincePosted [type:int])

return (score [Type:int)

logic:

return Math.round(1000*like_count+1000000*Math.exp(-lambda*(timeＳinceＰosted/1000)))

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
function GlobalRecommendNumberCalculator(like_count, timeSincePosted) {
    return Math.round(1000 * like_count + 1000000 * Math.exp(-lambda * (timeSincePosted / 1000)));
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:checkuserexists|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：checkuserexists
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - userinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
         
         user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
         
         username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
         
         +----------+-------------+------+-----+---------+----------------+
         | Field    | Type        | Null | Key | Default | Extra          |
         +----------+-------------+------+-----+---------+----------------+
         | user_id  | int         | NO   | PRI | NULL    | auto_increment |
         | username | varchar(50) | NO   | UNI | NULL    |                |
         +----------+-------------+------+-----+---------+----------------+
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();


現在要寫的元件的描述：
input: (username [type:string])

return: boolean

logic:
去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

async function checkuserexists(username) {
    try {
        const [rows] = await pool.query('SELECT user_id FROM userinfo WHERE username = ?', [username]);
        return rows.length > 0;
    } catch (error) {
        return true;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:searchusernamebyuserID|placeType:server|type:Function---------------- */
/*

<START>

元件名稱：searchusernamebyuserID
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
         
         user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
         
         username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
         
         +----------+-------------+------+-----+---------+----------------+
         | Field    | Type        | Null | Key | Default | Extra          |
         +----------+-------------+------+-----+---------+----------------+
         | user_id  | int         | NO   | PRI | NULL    | auto_increment |
         | username | varchar(50) | NO   | UNI | NULL    |                |
         +----------+-------------+------+-----+---------+----------------+


現在要寫的元件的描述：
input: (userID [type:int])

return: string or null

logic:
去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function searchusernamebyuserID(userID) {
    try {
        const [rows] = await pool.query('SELECT username FROM userinfo WHERE user_id = ?', [userID]);
        if (rows.length === 0) return null;
        return rows[0].username;
    } catch (error) {
        return null;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:searchuserIDbyusername|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：searchuserIDbyusername
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
         
         user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
         
         username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
         
         +----------+-------------+------+-----+---------+----------------+
         | Field    | Type        | Null | Key | Default | Extra          |
         +----------+-------------+------+-----+---------+----------------+
         | user_id  | int         | NO   | PRI | NULL    | auto_increment |
         | username | varchar(50) | NO   | UNI | NULL    |                |
         +----------+-------------+------+-----+---------+----------------+


現在要寫的元件的描述：
input: (username [type:string])

return: int or null

logic:
去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function searchuserIDbyusername(username) {
    try {
        const [rows] = await pool.query('SELECT user_id FROM userinfo WHERE username = ?', [username]);
        if (rows.length === 0) return null;
        return rows[0].user_id;
    } catch (error) {
        return null;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:modifyuserpostsinfo|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：modifyuserpostsinfo
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])

return: (a string [type:string])


logic:
去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function modifyuserpostsinfo(post_id, secondTime, article, imagepath) {
    try {
        const [result] = await pool.query(
            `UPDATE userpostsinfo 
             SET secondTime = ?, article = ?, imagepath = ?, created_at = FROM_UNIXTIME(?) 
             WHERE post_id = ?`,
            [secondTime, article, imagepath, Math.floor(Date.now() / 1000), post_id]
        );
        if (result.affectedRows === 0) {
            return "fail";
        }
        return "success";
    } catch (error) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Appenduserpostsinfo|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：Appenduserpostsinfo
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (timestamp [Type:int],userID [Type:int])

return: (a string [type:string])

logic:

先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

async function Appenduserpostsinfo(timestamp, userID) {
    try {
        const post_id = generatePostId(timestamp, userID);
        const [result] = await pool.query(
            `INSERT INTO userpostsinfo (post_id, user_id) VALUES (?, ?)`,
            [post_id, userID]
        );
        return result.affectedRows > 0 ? "success" : "fail";
    } catch (error) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:diduserlikepost|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：diduserlikepost
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userlikesinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
         
         - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
         - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
         - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
         - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
         
         +------------+------------------+------+-----+-------------------+-----------------------+
         | Field      | Type             | Null | Key | Default           | Extra                 |
         +------------+------------------+------+-----+-------------------+-----------------------+
         | user_id    | bigint           | NO   | PRI | NULL              |                       |
         | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
         | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         +------------+------------------+------+-----+-------------------+-----------------------+


現在要寫的元件的描述：
input: (user_id [type:int ],post_id [type:int])

return: (a boolean [Type:boolean])

logic: 
前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function diduserlikepost(user_id, post_id) {
    try {
        const [rows] = await pool.query(
            `SELECT 1 FROM userlikesinfo WHERE user_id = ? AND post_id = ? LIMIT 1`,
            [user_id, post_id]
        );
        return rows.length > 0;
    } catch (error) {
        return false;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:modifyuserpostsinfouserID|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：modifyuserpostsinfouserID
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (user_ID [Type:int],post_id [Type:int])

function type: it is async

return: (a string [type:string])
logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function modifyuserpostsinfouserID(user_ID, post_id) {
    try {
        const [result] = await pool.query(
            `UPDATE userpostsinfo SET user_id = ? WHERE post_id = ?`,
            [user_ID, post_id]
        );
        if (result.affectedRows === 0) {
            return "fail";
        }
        return "success";
    } catch (error) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:searchlike_count|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：searchlike_count
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (post_id [Type:int ])

function type: it is async

return (a number or null [type:int])
logic:
先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function searchlike_count(post_id) {
    if (!post_id) return null;
    try {
        const [rows] = await pool.query(
            'SELECT like_count FROM userpostsinfo WHERE post_id = ?',
            [post_id]
        );
        if (rows.length === 0) {
            return null;
        }
        return rows[0].like_count;
    } catch (error) {
        return null;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:unsendlike|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：unsendlike
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - userlikesinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
         
         - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
         - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
         - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
         - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
         
         +------------+------------------+------+-----+-------------------+-----------------------+
         | Field      | Type             | Null | Key | Default           | Extra                 |
         +------------+------------------+------+-----+-------------------+-----------------------+
         | user_id    | bigint           | NO   | PRI | NULL              |                       |
         | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
         | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         +------------+------------------+------+-----+-------------------+-----------------------+
  - userlikesinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
         
         - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
         - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
         - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
         - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
         
         +------------+------------------+------+-----+-------------------+-----------------------+
         | Field      | Type             | Null | Key | Default           | Extra                 |
         +------------+------------------+------+-----+-------------------+-----------------------+
         | user_id    | bigint           | NO   | PRI | NULL              |                       |
         | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
         | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         +------------+------------------+------+-----+-------------------+-----------------------+
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (user_id [type:int],post_id [type:int])

return: ( a string [type:string])


function type: it is async

logic:
先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function unsendlike(user_id, post_id) {
    try {
        // 先檢查是否已經按讚
        const [rows] = await pool.query(
            'SELECT * FROM userlikesinfo WHERE user_id = ? AND post_id = ?',
            [user_id, post_id]
        );
        if (rows.length === 0) {
            return "neverＬikeBefore";
        }

        // 刪除該筆按讚紀錄
        await pool.query(
            'DELETE FROM userlikesinfo WHERE user_id = ? AND post_id = ?',
            [user_id, post_id]
        );

        // 重新計算按讚數
        const [countRows] = await pool.query(
            'SELECT COUNT(*) AS likeCount FROM userlikesinfo WHERE post_id = ?',
            [post_id]
        );
        const newCount = countRows[0].likeCount;

        // 更新 userpostsinfo 的 like_count
        const [updateResult] = await pool.query(
            'UPDATE userpostsinfo SET like_count = ? WHERE post_id = ?',
            [newCount, post_id]
        );

        if (updateResult.affectedRows === 0) {
            return "fail";
        }

        return "success";
    } catch (err) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:sendlike|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：sendlike
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userlikesinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
         
         - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
         - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
         - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
         - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
         
         +------------+------------------+------+-----+-------------------+-----------------------+
         | Field      | Type             | Null | Key | Default           | Extra                 |
         +------------+------------------+------+-----+-------------------+-----------------------+
         | user_id    | bigint           | NO   | PRI | NULL              |                       |
         | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
         | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         +------------+------------------+------+-----+-------------------+-----------------------+
  - userlikesinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
         
         - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
         - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
         - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
         - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
         
         +------------+------------------+------+-----+-------------------+-----------------------+
         | Field      | Type             | Null | Key | Default           | Extra                 |
         +------------+------------------+------+-----+-------------------+-----------------------+
         | user_id    | bigint           | NO   | PRI | NULL              |                       |
         | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
         | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
         +------------+------------------+------+-----+-------------------+-----------------------+
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input: (user_id [type:int],post_id [type:int])

return: ( a string [type:string])

function type: it is async

logic:
先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

async function sendlike(user_id, post_id) {
    try {
        // 檢查是否已經按讚過
        const [checkRows] = await pool.query(
            'SELECT * FROM userlikesinfo WHERE user_id = ? AND post_id = ?',
            [user_id, post_id]
        );

        if (checkRows.length > 0) {
            return "alreadyExist";
        }

        // 插入新的按讚紀錄
        await pool.query(
            'INSERT INTO userlikesinfo (user_id, post_id) VALUES (?, ?)',
            [user_id, post_id]
        );

        // 重新計算該 post 的總按讚數
        const [countRows] = await pool.query(
            'SELECT COUNT(*) AS likeCount FROM userlikesinfo WHERE post_id = ?',
            [post_id]
        );

        const newLikeCount = countRows[0].likeCount;

        // 更新 userpostsinfo 中的 like_count 欄位
        const [updateResult] = await pool.query(
            'UPDATE userpostsinfo SET like_count = ? WHERE post_id = ?',
            [newLikeCount, post_id]
        );

        if (updateResult.affectedRows === 0) {
            return "fail";
        }

        return "success";
    } catch (err) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:readPostByPost_id|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：readPostByPost_id
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+


現在要寫的元件的描述：
input:(post_id)

return: ([type:json])

function type: it is async

logic:
前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

async function readPostByPost_id(post_id) {
    try {
        const [rows] = await pool.query(
            'SELECT * FROM userpostsinfo WHERE post_id = ?',
            [post_id]
        );

        if (rows.length === 0) {
            return null;
        }

        return rows[0];
    } catch (err) {
        return null;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Verify_LoginToken|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：Verify_LoginToken
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userLoginToken (Table) in newTestdatabase
    描述：
         這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
         
         username
         
         token：發放給該使用者的登入憑證，用於存取受保護資源。
         
         issued_at：token 發行時間，為 timestamp，預設為當下時間。
         
         expires_at：token 的過期時間，若已過期則無效，為 timestamp。
         
         created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
         
         
         +------------+--------------+------+-----+---------------------+----------------+
         | Field      | Type         | Null | Key | Default             | Extra          |
         +------------+--------------+------+-----+---------------------+----------------+
         | username   | varchar(50)  | NO   | PRI | NULL                |                |
         | token      | varchar(255) | NO   |     | NULL                |                |
         | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         | expires_at | timestamp    | YES  |     | NULL                |                |
         | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         +------------+--------------+------+-----+---------------------+----------------+


現在要寫的元件的描述：
input:(username [Type: string],token [Type: string])

return (true or false [Type:boolean])

function type: it is async

Logic:
前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function Verify_LoginToken(username, token) {
    try {
        const [rows] = await pool.query(
            'SELECT token FROM userLoginToken WHERE username = ?',
            [username]
        );

        if (rows.length === 0) {
            return false;
        }

        return rows[0].token === token;
    } catch (err) {
        return false;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Write_LoginToken|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：Write_LoginToken
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userLoginToken (Table) in newTestdatabase
    描述：
         這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
         
         username
         
         token：發放給該使用者的登入憑證，用於存取受保護資源。
         
         issued_at：token 發行時間，為 timestamp，預設為當下時間。
         
         expires_at：token 的過期時間，若已過期則無效，為 timestamp。
         
         created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
         
         
         +------------+--------------+------+-----+---------------------+----------------+
         | Field      | Type         | Null | Key | Default             | Extra          |
         +------------+--------------+------+-----+---------------------+----------------+
         | username   | varchar(50)  | NO   | PRI | NULL                |                |
         | token      | varchar(255) | NO   |     | NULL                |                |
         | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         | expires_at | timestamp    | YES  |     | NULL                |                |
         | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         +------------+--------------+------+-----+---------------------+----------------+
  - jwt (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         just import it
    - import from module (GlobalVariable) in jsonwebtoken
      描述：
          it is an external module. no need to write it
  - JWT_SECRET (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         I will do this


現在要寫的元件的描述：
input:(username [Type: string])

return : ( a json that contains state and token. state and token are string[Type: json])

function type: it is async

Logic:
在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function Write_LoginToken(username) {
    try {
        const issuedAt = Math.floor(Date.now() / 1000);
        const token = jwt.sign({ username, issuedAt }, JWT_SECRET);

        const [rows] = await pool.query(
            'INSERT INTO userLoginToken (username, token) VALUES (?, ?) ON DUPLICATE KEY UPDATE token = ?, issued_at = CURRENT_TIMESTAMP',
            [username, token, token]
        );

        return { state: "success", token };
    } catch (err) {
        return { state: "fail", token: "" };
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Write_HashedPassword|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：Write_HashedPassword
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userHashedPassword (Table) in newTestdatabase
    描述：
         | Field            | Type           | Null | Key | Default | Extra |
         | ---------------- | -------------- | ---- | --- | ------- | ----- |
         | username         | varchar(50)    | NO   | PRI | NULL    |       |
         | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
         
         
         用途說明：
         此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
         
         | 欄位名稱              | 說明                                                                |
         | ----------------- | ----------------------------------------------------------------- |
         | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
         | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |


現在要寫的元件的描述：
since i don't need it now, just write it as am empty function

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
function Write_HashedPassword() {
    // not implemented for now
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Verify_HashedPassword|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：Verify_HashedPassword
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userHashedPassword (Table) in newTestdatabase
    描述：
         | Field            | Type           | Null | Key | Default | Extra |
         | ---------------- | -------------- | ---- | --- | ------- | ----- |
         | username         | varchar(50)    | NO   | PRI | NULL    |       |
         | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
         
         
         用途說明：
         此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
         
         | 欄位名稱              | 說明                                                                |
         | ----------------- | ----------------------------------------------------------------- |
         | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
         | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |


現在要寫的元件的描述：
input: (username [type:string],hashedpassword [type:string])

return: boolean

logic:
直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function Verify_HashedPassword(username, hashedpassword) {
    try {
        const [rows] = await pool.query(
            'SELECT * FROM userHashedPassword WHERE username = ? AND hashed_password = ?',
            [username, hashedpassword]
        );
        if (rows.length > 0) {
            return true;
        } else {
            return false;
        }
    } catch (err) {
        return false;
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:Create_UserAccount|placeType:server|type:Function---------------- */
/*

<START>

元件名稱：Create_UserAccount
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userHashedPassword (Table) in newTestdatabase
    描述：
         | Field            | Type           | Null | Key | Default | Extra |
         | ---------------- | -------------- | ---- | --- | ------- | ----- |
         | username         | varchar(50)    | NO   | PRI | NULL    |       |
         | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
         
         
         用途說明：
         此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
         
         | 欄位名稱              | 說明                                                                |
         | ----------------- | ----------------------------------------------------------------- |
         | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
         | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
  - userinfo (Table) in newTestdatabase
    描述：
         這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
         
         user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
         
         username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
         
         +----------+-------------+------+-----+---------+----------------+
         | Field    | Type        | Null | Key | Default | Extra          |
         +----------+-------------+------+-----+---------+----------------+
         | user_id  | int         | NO   | PRI | NULL    | auto_increment |
         | username | varchar(50) | NO   | UNI | NULL    |                |
         +----------+-------------+------+-----+---------+----------------+
  - userLoginToken (Table) in newTestdatabase
    描述：
         這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
         
         username
         
         token：發放給該使用者的登入憑證，用於存取受保護資源。
         
         issued_at：token 發行時間，為 timestamp，預設為當下時間。
         
         expires_at：token 的過期時間，若已過期則無效，為 timestamp。
         
         created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
         
         
         +------------+--------------+------+-----+---------------------+----------------+
         | Field      | Type         | Null | Key | Default             | Extra          |
         +------------+--------------+------+-----+---------------------+----------------+
         | username   | varchar(50)  | NO   | PRI | NULL                |                |
         | token      | varchar(255) | NO   |     | NULL                |                |
         | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         | expires_at | timestamp    | YES  |     | NULL                |                |
         | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         +------------+--------------+------+-----+---------------------+----------------+


現在要寫的元件的描述：
input: (username [type:string],hashedpassword [type:string])

return: a string 

logic:
mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function Create_UserAccount(username, hashedpassword) {
    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        await connection.query(
            'INSERT INTO userHashedPassword (username, hashed_password) VALUES (?, ?)',
            [username, hashedpassword]
        );

        await connection.query(
            'INSERT INTO userinfo (username) VALUES (?)',
            [username]
        );

        await connection.query(
            'INSERT INTO userLoginToken (username, token) VALUES (?, NULL)',
            [username]
        );

        await connection.commit();
        connection.release();
        return "success";
    } catch (error) {
        await connection.rollback();
        connection.release();
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:logout|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：logout
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - userLoginToken (Table) in newTestdatabase
    描述：
         這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
         
         username
         
         token：發放給該使用者的登入憑證，用於存取受保護資源。
         
         issued_at：token 發行時間，為 timestamp，預設為當下時間。
         
         expires_at：token 的過期時間，若已過期則無效，為 timestamp。
         
         created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
         
         
         +------------+--------------+------+-----+---------------------+----------------+
         | Field      | Type         | Null | Key | Default             | Extra          |
         +------------+--------------+------+-----+---------------------+----------------+
         | username   | varchar(50)  | NO   | PRI | NULL                |                |
         | token      | varchar(255) | NO   |     | NULL                |                |
         | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         | expires_at | timestamp    | YES  |     | NULL                |                |
         | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
         +------------+--------------+------+-----+---------------------+----------------+
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();


現在要寫的元件的描述：
input :(username [type:string])


return : (a string [type: string])

logic:

前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function logout(username) {
    try {
        const [result] = await pool.query(
            'UPDATE userLoginToken SET token = NULL WHERE username = ?',
            [username]
        );
        if (result.affectedRows === 0) {
            return "fail";
        }
        return "success";
    } catch (error) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:updateAndSendGlobalRecommendNumber|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：updateAndSendGlobalRecommendNumber
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+
  - userpostsinfo (Table) in newTestdatabase
    描述：
         這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
         
         - `post_id`：貼文的唯一識別碼，為主鍵。
         - `user_id`：發文者的用戶 ID。
         - `like_count`：此貼文累積的按讚數，初始為 0。
         - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
         - `article`：貼文的正文內容。
         - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
         - `created_at`：貼文發表時間。
         - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
         - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
         - `deleted_at_seconds`：刪除時間的 Unix timestamp。
         - `deleted_at_datetime`：刪除時間的 datetime 格式。
         - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
         - `ban_reason`：封鎖理由文字說明。
         - `ban_at`：貼文被封鎖的時間。
         
         +------------------------+------------------+------+-----+--------+-------+
         | Field                  | Type             | Null | Key | Default| Extra |
         +------------------------+------------------+------+-----+--------+-------+
         | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
         | user_id                | bigint            | NO   | MUL | NULL   |       |
         | like_count             | int unsigned      | YES  |     | 0      |       |
         | secondTime             | bigint            | YES  |     | NULL   |       |
         | article                | text              | YES  |     | NULL   |       |
         | imagepath              | varchar(500)      | YES  |     | NULL   |       |
         | created_at             | datetime          | YES  |     | NULL   |       |
         | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
         | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
         | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
         | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
         | is_banned              | tinyint(1)        | YES  |     | 0      |       |
         | ban_reason             | text              | YES  |     | NULL   |       |
         | ban_at                 | datetime          | YES  |     | NULL   |       |
         +------------------------+------------------+------+-----+--------+-------+
  - GlobalRecommendNumberCalculator (Function) in ./application/sqldatacenter.js
    描述：
         input :(like_count[type:int ],timeSincePosted [type:int])
         
         return (score [Type:int)
         
         logic:
         
         return Math.round(1000*like_count+1000000*Math.exp(-lambda*(timeＳinceＰosted/1000)))


現在要寫的元件的描述：
input: no input

return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
globalrecommendscore和user_id對應到int。


function type: it is async


logic:

先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。

最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function updateAndSendGlobalRecommendNumber() {
    try {
        const [posts] = await pool.query(
            'SELECT post_id, like_count, secondTime FROM userpostsinfo WHERE is_deleted = FALSE'
        );

        for (const post of posts) {
            const timeSincePosted = Date.now() - Number(post.secondTime);
            const score = GlobalRecommendNumberCalculator(post.like_count, timeSincePosted);

            await pool.query(
                'UPDATE userpostsinfo SET globalrecommendscore = ? WHERE post_id = ?',
                [score, post.post_id]
            );
        }

        const [updatedPosts] = await pool.query(
            'SELECT post_id, globalrecommendscore, user_id FROM userpostsinfo WHERE is_deleted = FALSE'
        );

        return updatedPosts.map(row => ({
            post_id: row.post_id.toString(),
            globalrecommendscore: Number(row.globalrecommendscore),
            user_id: Number(row.user_id)
        }));
    } catch (err) {
        return [];
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:makepost|placeType:server|type:Function---------------- */
/*
<START>

元件名稱：makepost
類型：Function
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
  - Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
    描述：
         input: (timestamp [Type:int],userID [Type:int])
         
         return: (a string [type:string])
         
         logic:
         
         先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
  - generatePostId (Function) in ./application/sqldatacenter.js
    描述：
         input:(timestamp [Type: int],userId [Type: int])
         
         return: (a big INT number [Type: BigInt])
         
         Logic:
         輸出的數字末十位放userId，userId前面放timestamp
  - modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
    描述：
         input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
         
         return: (a string [type:string])
         
         
         logic:
         去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
         如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
  - modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
    描述：
         input: (user_ID [Type:int],post_id [Type:int])
         
         function type: it is async
         
         return: (a string [type:string])
         logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。


現在要寫的元件的描述：
input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);

return: (a string [type:string])


logic:
do things as below. if they all succeed,then return "success";otherwise, return "false".

     const userID=await searchuserIDbyusername(username);
     await Appenduserpostsinfo(secondTime,userID);
     const post_id=generatePostId(secondTime,userID);
     await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
		
     await modifyuserpostsinfouserID(userID,post_id);

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
async function makepost(username, imagepath, article, secondTime) {
    try {
        const userID = await searchuserIDbyusername(username);
        if (userID === null) return "fail";

        const appendResult = await Appenduserpostsinfo(secondTime, userID);
        if (appendResult !== "success") return "fail";

        const post_id = generatePostId(secondTime, userID);

        const modifyResult = await modifyuserpostsinfo(post_id, secondTime, article, imagepath);
        if (modifyResult !== "success") return "fail";

        const userIDUpdateResult = await modifyuserpostsinfouserID(userID, post_id);
        if (userIDUpdateResult !== "success") return "fail";

        return "success";
    } catch (err) {
        return "fail";
    }
}


/* ----------------prompt-----Id: filename:./application/sqldatacenter.js|name:sqldatacenter|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：sqldatacenter
類型：GlobalVariable
檔案：./application/sqldatacenter.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - pool (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         const pool = mysql.createPool({
             host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
             user: sqlusername,
             password: sqlpassword,
             database: 'testdatabase',
             waitForConnections: true,
             connectionLimit: 10,
             queueLimit: 0
         }).promise();
    - calls mysql (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          這是個import來的物件
      - import from module (GlobalVariable) in mysql2
        描述：
           it is an external module. no need to write it
    - calls sqlusername (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          這是個import來的物件
      - import from sqlusername (GlobalVariable) in ./application/sqlusername
        描述：
           I'll do it by my self
    - calls sqlpassword (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          這是個import來的物件
      - import from sqlpassword (GlobalVariable) in ./application/sqlpassword
        描述：
           I'll do it By myself
  - readPostByPost_id (Function) in ./application/sqldatacenter.js
    描述：
         input:(post_id)
         
         return: ([type:json])
         
         function type: it is async
         
         logic:
         前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - sendlike (Function) in ./application/sqldatacenter.js
    描述：
         input: (user_id [type:int],post_id [type:int])
         
         return: ( a string [type:string])
         
         function type: it is async
         
         logic:
         先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userlikesinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
          
          - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
          - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
          - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
          - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
          
          +------------+------------------+------+-----+-------------------+-----------------------+
          | Field      | Type             | Null | Key | Default           | Extra                 |
          +------------+------------------+------+-----+-------------------+-----------------------+
          | user_id    | bigint           | NO   | PRI | NULL              |                       |
          | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
          | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          +------------+------------------+------+-----+-------------------+-----------------------+
    - writes_table userlikesinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
          
          - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
          - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
          - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
          - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
          
          +------------+------------------+------+-----+-------------------+-----------------------+
          | Field      | Type             | Null | Key | Default           | Extra                 |
          +------------+------------------+------+-----+-------------------+-----------------------+
          | user_id    | bigint           | NO   | PRI | NULL              |                       |
          | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
          | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          +------------+------------------+------+-----+-------------------+-----------------------+
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - unsendlike (Function) in ./application/sqldatacenter.js
    描述：
         input: (user_id [type:int],post_id [type:int])
         
         return: ( a string [type:string])
         
         
         function type: it is async
         
         logic:
         先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
    - reads_table userlikesinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
          
          - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
          - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
          - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
          - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
          
          +------------+------------------+------+-----+-------------------+-----------------------+
          | Field      | Type             | Null | Key | Default           | Extra                 |
          +------------+------------------+------+-----+-------------------+-----------------------+
          | user_id    | bigint           | NO   | PRI | NULL              |                       |
          | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
          | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          +------------+------------------+------+-----+-------------------+-----------------------+
    - writes_table userlikesinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
          
          - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
          - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
          - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
          - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
          
          +------------+------------------+------+-----+-------------------+-----------------------+
          | Field      | Type             | Null | Key | Default           | Extra                 |
          +------------+------------------+------+-----+-------------------+-----------------------+
          | user_id    | bigint           | NO   | PRI | NULL              |                       |
          | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
          | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          +------------+------------------+------+-----+-------------------+-----------------------+
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
    描述：
         input: no input
         
         return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
         globalrecommendscore和user_id對應到int。
         
         
         function type: it is async
         
         
         logic:
         
         先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
         
         最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
    - reads_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
    - calls GlobalRecommendNumberCalculator (Function) in ./application/sqldatacenter.js
      描述：
          input :(like_count[type:int ],timeSincePosted [type:int])
          
          return (score [Type:int)
          
          logic:
          
          return Math.round(1000*like_count+1000000*Math.exp(-lambda*(timeＳinceＰosted/1000)))
  - searchlike_count (Function) in ./application/sqldatacenter.js
    描述：
         input: (post_id [Type:int ])
         
         function type: it is async
         
         return (a number or null [type:int])
         logic:
         先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - makepost (Function) in ./application/sqldatacenter.js
    描述：
         input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
         
         return: (a string [type:string])
         
         
         logic:
         do things as below. if they all succeed,then return "success";otherwise, return "false".
         
              const userID=await searchuserIDbyusername(username);
              await Appenduserpostsinfo(secondTime,userID);
              const post_id=generatePostId(secondTime,userID);
              await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
         		
              await modifyuserpostsinfouserID(userID,post_id);
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - calls Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
      描述：
          input: (timestamp [Type:int],userID [Type:int])
          
          return: (a string [type:string])
          
          logic:
          
          先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
    - calls generatePostId (Function) in ./application/sqldatacenter.js
      描述：
          input:(timestamp [Type: int],userId [Type: int])
          
          return: (a big INT number [Type: BigInt])
          
          Logic:
          輸出的數字末十位放userId，userId前面放timestamp
    - calls modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
      描述：
          input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
          
          return: (a string [type:string])
          
          
          logic:
          去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
          如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
    - calls modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
      描述：
          input: (user_ID [Type:int],post_id [Type:int])
          
          function type: it is async
          
          return: (a string [type:string])
          logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
  - diduserlikepost (Function) in ./application/sqldatacenter.js
    描述：
         input: (user_id [type:int ],post_id [type:int])
         
         return: (a boolean [Type:boolean])
         
         logic: 
         前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userlikesinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
          
          - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
          - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
          - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
          - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
          
          +------------+------------------+------+-----+-------------------+-----------------------+
          | Field      | Type             | Null | Key | Default           | Extra                 |
          +------------+------------------+------+-----+-------------------+-----------------------+
          | user_id    | bigint           | NO   | PRI | NULL              |                       |
          | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
          | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
          +------------+------------------+------+-----+-------------------+-----------------------+
  - Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
    描述：
         input: (timestamp [Type:int],userID [Type:int])
         
         return: (a string [type:string])
         
         logic:
         
         先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
    描述：
         input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
         
         return: (a string [type:string])
         
         
         logic:
         去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
         如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - searchuserIDbyusername (Function) in ./application/sqldatacenter.js
    描述：
         input: (username [type:string])
         
         return: int or null
         
         logic:
         去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
          
          user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
          
          username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
          
          +----------+-------------+------+-----+---------+----------------+
          | Field    | Type        | Null | Key | Default | Extra          |
          +----------+-------------+------+-----+---------+----------------+
          | user_id  | int         | NO   | PRI | NULL    | auto_increment |
          | username | varchar(50) | NO   | UNI | NULL    |                |
          +----------+-------------+------+-----+---------+----------------+
  - searchusernamebyuserID (Function) in ./application/sqldatacenter.js
    描述：
         input: (userID [type:int])
         
         return: string or null
         
         logic:
         去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
          
          user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
          
          username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
          
          +----------+-------------+------+-----+---------+----------------+
          | Field    | Type        | Null | Key | Default | Extra          |
          +----------+-------------+------+-----+---------+----------------+
          | user_id  | int         | NO   | PRI | NULL    | auto_increment |
          | username | varchar(50) | NO   | UNI | NULL    |                |
          +----------+-------------+------+-----+---------+----------------+
  - checkuserexists (Function) in ./application/sqldatacenter.js
    描述：
         input: (username [type:string])
         
         return: boolean
         
         logic:
         去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
    - reads_table userinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
          
          user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
          
          username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
          
          +----------+-------------+------+-----+---------+----------------+
          | Field    | Type        | Null | Key | Default | Extra          |
          +----------+-------------+------+-----+---------+----------------+
          | user_id  | int         | NO   | PRI | NULL    | auto_increment |
          | username | varchar(50) | NO   | UNI | NULL    |                |
          +----------+-------------+------+-----+---------+----------------+
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
  - modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
    描述：
         input: (user_ID [Type:int],post_id [Type:int])
         
         function type: it is async
         
         return: (a string [type:string])
         logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userpostsinfo (Table) in newTestdatabase
      描述：
          這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
          
          - `post_id`：貼文的唯一識別碼，為主鍵。
          - `user_id`：發文者的用戶 ID。
          - `like_count`：此貼文累積的按讚數，初始為 0。
          - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
          - `article`：貼文的正文內容。
          - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
          - `created_at`：貼文發表時間。
          - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
          - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
          - `deleted_at_seconds`：刪除時間的 Unix timestamp。
          - `deleted_at_datetime`：刪除時間的 datetime 格式。
          - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
          - `ban_reason`：封鎖理由文字說明。
          - `ban_at`：貼文被封鎖的時間。
          
          +------------------------+------------------+------+-----+--------+-------+
          | Field                  | Type             | Null | Key | Default| Extra |
          +------------------------+------------------+------+-----+--------+-------+
          | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
          | user_id                | bigint            | NO   | MUL | NULL   |       |
          | like_count             | int unsigned      | YES  |     | 0      |       |
          | secondTime             | bigint            | YES  |     | NULL   |       |
          | article                | text              | YES  |     | NULL   |       |
          | imagepath              | varchar(500)      | YES  |     | NULL   |       |
          | created_at             | datetime          | YES  |     | NULL   |       |
          | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
          | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
          | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
          | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
          | is_banned              | tinyint(1)        | YES  |     | 0      |       |
          | ban_reason             | text              | YES  |     | NULL   |       |
          | ban_at                 | datetime          | YES  |     | NULL   |       |
          +------------------------+------------------+------+-----+--------+-------+
  - Verify_LoginToken (Function) in ./application/sqldatacenter.js
    描述：
         input:(username [Type: string],token [Type: string])
         
         return (true or false [Type:boolean])
         
         function type: it is async
         
         Logic:
         前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userLoginToken (Table) in newTestdatabase
      描述：
          這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
          
          username
          
          token：發放給該使用者的登入憑證，用於存取受保護資源。
          
          issued_at：token 發行時間，為 timestamp，預設為當下時間。
          
          expires_at：token 的過期時間，若已過期則無效，為 timestamp。
          
          created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
          
          
          +------------+--------------+------+-----+---------------------+----------------+
          | Field      | Type         | Null | Key | Default             | Extra          |
          +------------+--------------+------+-----+---------------------+----------------+
          | username   | varchar(50)  | NO   | PRI | NULL                |                |
          | token      | varchar(255) | NO   |     | NULL                |                |
          | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          | expires_at | timestamp    | YES  |     | NULL                |                |
          | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          +------------+--------------+------+-----+---------------------+----------------+
  - Write_LoginToken (Function) in ./application/sqldatacenter.js
    描述：
         input:(username [Type: string])
         
         return : ( a json that contains state and token. state and token are string[Type: json])
         
         function type: it is async
         
         Logic:
         在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userLoginToken (Table) in newTestdatabase
      描述：
          這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
          
          username
          
          token：發放給該使用者的登入憑證，用於存取受保護資源。
          
          issued_at：token 發行時間，為 timestamp，預設為當下時間。
          
          expires_at：token 的過期時間，若已過期則無效，為 timestamp。
          
          created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
          
          
          +------------+--------------+------+-----+---------------------+----------------+
          | Field      | Type         | Null | Key | Default             | Extra          |
          +------------+--------------+------+-----+---------------------+----------------+
          | username   | varchar(50)  | NO   | PRI | NULL                |                |
          | token      | varchar(255) | NO   |     | NULL                |                |
          | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          | expires_at | timestamp    | YES  |     | NULL                |                |
          | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          +------------+--------------+------+-----+---------------------+----------------+
    - calls jwt (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          just import it
      - import from module (GlobalVariable) in jsonwebtoken
        描述：
           it is an external module. no need to write it
    - calls JWT_SECRET (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          I will do this
  - generatePostId (Function) in ./application/sqldatacenter.js
    描述：
         input:(timestamp [Type: int],userId [Type: int])
         
         return: (a big INT number [Type: BigInt])
         
         Logic:
         輸出的數字末十位放userId，userId前面放timestamp
  - Write_HashedPassword (Function) in ./application/sqldatacenter.js
    描述：
         since i don't need it now, just write it as am empty function
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userHashedPassword (Table) in newTestdatabase
      描述：
          | Field            | Type           | Null | Key | Default | Extra |
          | ---------------- | -------------- | ---- | --- | ------- | ----- |
          | username         | varchar(50)    | NO   | PRI | NULL    |       |
          | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
          
          
          用途說明：
          此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
          
          | 欄位名稱              | 說明                                                                |
          | ----------------- | ----------------------------------------------------------------- |
          | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
          | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
  - Verify_HashedPassword (Function) in ./application/sqldatacenter.js
    描述：
         input: (username [type:string],hashedpassword [type:string])
         
         return: boolean
         
         logic:
         直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - reads_table userHashedPassword (Table) in newTestdatabase
      描述：
          | Field            | Type           | Null | Key | Default | Extra |
          | ---------------- | -------------- | ---- | --- | ------- | ----- |
          | username         | varchar(50)    | NO   | PRI | NULL    |       |
          | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
          
          
          用途說明：
          此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
          
          | 欄位名稱              | 說明                                                                |
          | ----------------- | ----------------------------------------------------------------- |
          | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
          | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
  - Create_UserAccount (Function) in ./application/sqldatacenter.js
    描述：
         input: (username [type:string],hashedpassword [type:string])
         
         return: a string 
         
         logic:
         mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
    - writes_table userHashedPassword (Table) in newTestdatabase
      描述：
          | Field            | Type           | Null | Key | Default | Extra |
          | ---------------- | -------------- | ---- | --- | ------- | ----- |
          | username         | varchar(50)    | NO   | PRI | NULL    |       |
          | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
          
          
          用途說明：
          此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
          
          | 欄位名稱              | 說明                                                                |
          | ----------------- | ----------------------------------------------------------------- |
          | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
          | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
    - writes_table userinfo (Table) in newTestdatabase
      描述：
          這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
          
          user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
          
          username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
          
          +----------+-------------+------+-----+---------+----------------+
          | Field    | Type        | Null | Key | Default | Extra          |
          +----------+-------------+------+-----+---------+----------------+
          | user_id  | int         | NO   | PRI | NULL    | auto_increment |
          | username | varchar(50) | NO   | UNI | NULL    |                |
          +----------+-------------+------+-----+---------+----------------+
    - writes_table userLoginToken (Table) in newTestdatabase
      描述：
          這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
          
          username
          
          token：發放給該使用者的登入憑證，用於存取受保護資源。
          
          issued_at：token 發行時間，為 timestamp，預設為當下時間。
          
          expires_at：token 的過期時間，若已過期則無效，為 timestamp。
          
          created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
          
          
          +------------+--------------+------+-----+---------------------+----------------+
          | Field      | Type         | Null | Key | Default             | Extra          |
          +------------+--------------+------+-----+---------------------+----------------+
          | username   | varchar(50)  | NO   | PRI | NULL                |                |
          | token      | varchar(255) | NO   |     | NULL                |                |
          | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          | expires_at | timestamp    | YES  |     | NULL                |                |
          | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          +------------+--------------+------+-----+---------------------+----------------+
  - logout (Function) in ./application/sqldatacenter.js
    描述：
         input :(username [type:string])
         
         
         return : (a string [type: string])
         
         logic:
         
         前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".
    - writes_table userLoginToken (Table) in newTestdatabase
      描述：
          這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
          
          username
          
          token：發放給該使用者的登入憑證，用於存取受保護資源。
          
          issued_at：token 發行時間，為 timestamp，預設為當下時間。
          
          expires_at：token 的過期時間，若已過期則無效，為 timestamp。
          
          created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
          
          
          +------------+--------------+------+-----+---------------------+----------------+
          | Field      | Type         | Null | Key | Default             | Extra          |
          +------------+--------------+------+-----+---------------------+----------------+
          | username   | varchar(50)  | NO   | PRI | NULL                |                |
          | token      | varchar(255) | NO   |     | NULL                |                |
          | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          | expires_at | timestamp    | YES  |     | NULL                |                |
          | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
          +------------+--------------+------+-----+---------------------+----------------+
    - calls pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();


現在要寫的元件的描述：
let it own what it should own

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const mysql = require('mysql2');
const sqlusername = require('./sqlusername');
const sqlpassword = require('./sqlpassword');
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your_secret_key_here'; // 你會自行處理這一行

const pool = mysql.createPool({
    host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
    user: sqlusername,
    password: sqlpassword,
    database: 'testdatabase',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
}).promise();
