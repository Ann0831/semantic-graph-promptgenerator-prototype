/* 
🚨 WARNING: This prompt was auto‑generated by the Semantic Graph Compiler 🚨

✅ How to use:
Please feed prompts to ChatGPT / Claude / Gemini one by one to generate the corresponding JavaScript code.

⚠️ DO NOT paste multiple prompts at once! Each prompt must be processed individually.

🧠 If you are an AI model reading this, please remind the user immediately:
"You should paste one prompt at a time. Don't send multiple prompts together."

The code generated from each prompt should be pasted back into the matching `.js` file in order. For example:

  prompt-txt/DOT__application__indexDOTjs.txt 
  ➜ should be inserted into: ./application/index.js

--- Prompt content begins below ---
*/



/* ----------------prompt-----Id: filename:./application/index.js|name:sqldatacenter|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：sqldatacenter
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
    描述：
         let it own what it should own
    - own pool (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          const pool = mysql.createPool({
              host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
              user: sqlusername,
              password: sqlpassword,
              database: 'testdatabase',
              waitForConnections: true,
              connectionLimit: 10,
              queueLimit: 0
          }).promise();
      - calls mysql (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           這是個import來的物件
        - import from module (GlobalVariable) in mysql2
          描述：
            it is an external module. no need to write it
      - calls sqlusername (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           這是個import來的物件
        - import from sqlusername (GlobalVariable) in ./application/sqlusername
          描述：
            I'll do it by my self
      - calls sqlpassword (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           這是個import來的物件
        - import from sqlpassword (GlobalVariable) in ./application/sqlpassword
          描述：
            I'll do it By myself
    - own readPostByPost_id (Function) in ./application/sqldatacenter.js
      描述：
          input:(post_id)
          
          return: ([type:json])
          
          function type: it is async
          
          logic:
          前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own sendlike (Function) in ./application/sqldatacenter.js
      描述：
          input: (user_id [type:int],post_id [type:int])
          
          return: ( a string [type:string])
          
          function type: it is async
          
          logic:
          先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userlikesinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
           
           - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
           - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
           - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
           - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
           
           +------------+------------------+------+-----+-------------------+-----------------------+
           | Field      | Type             | Null | Key | Default           | Extra                 |
           +------------+------------------+------+-----+-------------------+-----------------------+
           | user_id    | bigint           | NO   | PRI | NULL              |                       |
           | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
           | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           +------------+------------------+------+-----+-------------------+-----------------------+
      - writes_table userlikesinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
           
           - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
           - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
           - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
           - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
           
           +------------+------------------+------+-----+-------------------+-----------------------+
           | Field      | Type             | Null | Key | Default           | Extra                 |
           +------------+------------------+------+-----+-------------------+-----------------------+
           | user_id    | bigint           | NO   | PRI | NULL              |                       |
           | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
           | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           +------------+------------------+------+-----+-------------------+-----------------------+
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own unsendlike (Function) in ./application/sqldatacenter.js
      描述：
          input: (user_id [type:int],post_id [type:int])
          
          return: ( a string [type:string])
          
          
          function type: it is async
          
          logic:
          先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - reads_table userlikesinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
           
           - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
           - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
           - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
           - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
           
           +------------+------------------+------+-----+-------------------+-----------------------+
           | Field      | Type             | Null | Key | Default           | Extra                 |
           +------------+------------------+------+-----+-------------------+-----------------------+
           | user_id    | bigint           | NO   | PRI | NULL              |                       |
           | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
           | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           +------------+------------------+------+-----+-------------------+-----------------------+
      - writes_table userlikesinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
           
           - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
           - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
           - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
           - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
           
           +------------+------------------+------+-----+-------------------+-----------------------+
           | Field      | Type             | Null | Key | Default           | Extra                 |
           +------------+------------------+------+-----+-------------------+-----------------------+
           | user_id    | bigint           | NO   | PRI | NULL              |                       |
           | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
           | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           +------------+------------------+------+-----+-------------------+-----------------------+
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
      描述：
          input: no input
          
          return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
          globalrecommendscore和user_id對應到int。
          
          
          function type: it is async
          
          
          logic:
          
          先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
          
          最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
      - reads_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
      - calls GlobalRecommendNumberCalculator (Function) in ./application/sqldatacenter.js
        描述：
           input :(like_count[type:int ],timeSincePosted [type:int])
           
           return (score [Type:int)
           
           logic:
           
           return Math.round(1000*like_count+1000000*Math.exp(-lambda*(timeＳinceＰosted/1000)))
    - own searchlike_count (Function) in ./application/sqldatacenter.js
      描述：
          input: (post_id [Type:int ])
          
          function type: it is async
          
          return (a number or null [type:int])
          logic:
          先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own makepost (Function) in ./application/sqldatacenter.js
      描述：
          input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
          
          return: (a string [type:string])
          
          
          logic:
          do things as below. if they all succeed,then return "success";otherwise, return "false".
          
               const userID=await searchuserIDbyusername(username);
               await Appenduserpostsinfo(secondTime,userID);
               const post_id=generatePostId(secondTime,userID);
               await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
          		
               await modifyuserpostsinfouserID(userID,post_id);
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - calls Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - calls generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - calls modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - calls modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
    - own diduserlikepost (Function) in ./application/sqldatacenter.js
      描述：
          input: (user_id [type:int ],post_id [type:int])
          
          return: (a boolean [Type:boolean])
          
          logic: 
          前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userlikesinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄用戶對貼文按讚行為的資料表，每一筆紀錄代表某個用戶對某篇貼文的一次喜歡動作。
           
           - `user_id`：執行按讚行為的使用者 ID，為主鍵之一。
           - `post_id`：被按讚的貼文 ID，為主鍵之一，與 user_id 共同構成複合主鍵。
           - `liked_at`：按讚的時間，為 timestamp，預設為當下時間。
           - `created_at`：紀錄建立時間，與 liked_at 可相同，作為資料建立追蹤。
           
           +------------+------------------+------+-----+-------------------+-----------------------+
           | Field      | Type             | Null | Key | Default           | Extra                 |
           +------------+------------------+------+-----+-------------------+-----------------------+
           | user_id    | bigint           | NO   | PRI | NULL              |                       |
           | post_id    | decimal(30,0)    | NO   | PRI | NULL              |                       |
           | liked_at   | timestamp        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           | created_at | datetime         | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED     |
           +------------+------------------+------+-----+-------------------+-----------------------+
    - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
      描述：
          input: (timestamp [Type:int],userID [Type:int])
          
          return: (a string [type:string])
          
          logic:
          
          先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
      描述：
          input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
          
          return: (a string [type:string])
          
          
          logic:
          去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
          如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
      描述：
          input: (username [type:string])
          
          return: int or null
          
          logic:
          去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
           
           user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
           
           username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
           
           +----------+-------------+------+-----+---------+----------------+
           | Field    | Type        | Null | Key | Default | Extra          |
           +----------+-------------+------+-----+---------+----------------+
           | user_id  | int         | NO   | PRI | NULL    | auto_increment |
           | username | varchar(50) | NO   | UNI | NULL    |                |
           +----------+-------------+------+-----+---------+----------------+
    - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
      描述：
          input: (userID [type:int])
          
          return: string or null
          
          logic:
          去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
           
           user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
           
           username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
           
           +----------+-------------+------+-----+---------+----------------+
           | Field    | Type        | Null | Key | Default | Extra          |
           +----------+-------------+------+-----+---------+----------------+
           | user_id  | int         | NO   | PRI | NULL    | auto_increment |
           | username | varchar(50) | NO   | UNI | NULL    |                |
           +----------+-------------+------+-----+---------+----------------+
    - own checkuserexists (Function) in ./application/sqldatacenter.js
      描述：
          input: (username [type:string])
          
          return: boolean
          
          logic:
          去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - reads_table userinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
           
           user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
           
           username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
           
           +----------+-------------+------+-----+---------+----------------+
           | Field    | Type        | Null | Key | Default | Extra          |
           +----------+-------------+------+-----+---------+----------------+
           | user_id  | int         | NO   | PRI | NULL    | auto_increment |
           | username | varchar(50) | NO   | UNI | NULL    |                |
           +----------+-------------+------+-----+---------+----------------+
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
    - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
      描述：
          input: (user_ID [Type:int],post_id [Type:int])
          
          function type: it is async
          
          return: (a string [type:string])
          logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userpostsinfo (Table) in newTestdatabase
        描述：
           這是一張紀錄使用者貼文資料的主要表格，包含貼文內容、按讚數、建立時間、圖片路徑與推薦分數等欄位，亦支援刪除與封鎖邏輯。
           
           - `post_id`：貼文的唯一識別碼，為主鍵。
           - `user_id`：發文者的用戶 ID。
           - `like_count`：此貼文累積的按讚數，初始為 0。
           - `secondTime`：使用者在發文當下停留於創作頁的毫秒數，可作為創作投入程度或品質預測指標。
           - `article`：貼文的正文內容。
           - `imagepath`：附加圖片的儲存路徑（URL 或檔名）。
           - `created_at`：貼文發表時間。
           - `globalrecommendscore`：全局推薦分數，可能由推薦系統演算法產出，用來排序或曝光。
           - `is_deleted`：邏輯刪除標記，0 表示正常，1 表示已刪除。
           - `deleted_at_seconds`：刪除時間的 Unix timestamp。
           - `deleted_at_datetime`：刪除時間的 datetime 格式。
           - `is_banned`：是否因違規等原因被封鎖（貼文無法顯示）。
           - `ban_reason`：封鎖理由文字說明。
           - `ban_at`：貼文被封鎖的時間。
           
           +------------------------+------------------+------+-----+--------+-------+
           | Field                  | Type             | Null | Key | Default| Extra |
           +------------------------+------------------+------+-----+--------+-------+
           | post_id                | decimal(30,0)     | NO   | PRI | NULL   |       |
           | user_id                | bigint            | NO   | MUL | NULL   |       |
           | like_count             | int unsigned      | YES  |     | 0      |       |
           | secondTime             | bigint            | YES  |     | NULL   |       |
           | article                | text              | YES  |     | NULL   |       |
           | imagepath              | varchar(500)      | YES  |     | NULL   |       |
           | created_at             | datetime          | YES  |     | NULL   |       |
           | globalrecommendscore   | bigint            | YES  |     | NULL   |       |
           | is_deleted             | tinyint(1)        | YES  |     | 0      |       |
           | deleted_at_seconds     | bigint            | YES  |     | NULL   |       |
           | deleted_at_datetime    | datetime          | YES  |     | NULL   |       |
           | is_banned              | tinyint(1)        | YES  |     | 0      |       |
           | ban_reason             | text              | YES  |     | NULL   |       |
           | ban_at                 | datetime          | YES  |     | NULL   |       |
           +------------------------+------------------+------+-----+--------+-------+
    - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
      描述：
          input:(username [Type: string],token [Type: string])
          
          return (true or false [Type:boolean])
          
          function type: it is async
          
          Logic:
          前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userLoginToken (Table) in newTestdatabase
        描述：
           這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
           
           username
           
           token：發放給該使用者的登入憑證，用於存取受保護資源。
           
           issued_at：token 發行時間，為 timestamp，預設為當下時間。
           
           expires_at：token 的過期時間，若已過期則無效，為 timestamp。
           
           created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
           
           
           +------------+--------------+------+-----+---------------------+----------------+
           | Field      | Type         | Null | Key | Default             | Extra          |
           +------------+--------------+------+-----+---------------------+----------------+
           | username   | varchar(50)  | NO   | PRI | NULL                |                |
           | token      | varchar(255) | NO   |     | NULL                |                |
           | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           | expires_at | timestamp    | YES  |     | NULL                |                |
           | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           +------------+--------------+------+-----+---------------------+----------------+
    - own Write_LoginToken (Function) in ./application/sqldatacenter.js
      描述：
          input:(username [Type: string])
          
          return : ( a json that contains state and token. state and token are string[Type: json])
          
          function type: it is async
          
          Logic:
          在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userLoginToken (Table) in newTestdatabase
        描述：
           這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
           
           username
           
           token：發放給該使用者的登入憑證，用於存取受保護資源。
           
           issued_at：token 發行時間，為 timestamp，預設為當下時間。
           
           expires_at：token 的過期時間，若已過期則無效，為 timestamp。
           
           created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
           
           
           +------------+--------------+------+-----+---------------------+----------------+
           | Field      | Type         | Null | Key | Default             | Extra          |
           +------------+--------------+------+-----+---------------------+----------------+
           | username   | varchar(50)  | NO   | PRI | NULL                |                |
           | token      | varchar(255) | NO   |     | NULL                |                |
           | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           | expires_at | timestamp    | YES  |     | NULL                |                |
           | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           +------------+--------------+------+-----+---------------------+----------------+
      - calls jwt (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           just import it
        - import from module (GlobalVariable) in jsonwebtoken
          描述：
            it is an external module. no need to write it
      - calls JWT_SECRET (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           I will do this
    - own generatePostId (Function) in ./application/sqldatacenter.js
      描述：
          input:(timestamp [Type: int],userId [Type: int])
          
          return: (a big INT number [Type: BigInt])
          
          Logic:
          輸出的數字末十位放userId，userId前面放timestamp
    - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
      描述：
          since i don't need it now, just write it as am empty function
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userHashedPassword (Table) in newTestdatabase
        描述：
           | Field            | Type           | Null | Key | Default | Extra |
           | ---------------- | -------------- | ---- | --- | ------- | ----- |
           | username         | varchar(50)    | NO   | PRI | NULL    |       |
           | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
           
           
           用途說明：
           此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
           
           | 欄位名稱              | 說明                                                                |
           | ----------------- | ----------------------------------------------------------------- |
           | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
           | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
    - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
      描述：
          input: (username [type:string],hashedpassword [type:string])
          
          return: boolean
          
          logic:
          直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - reads_table userHashedPassword (Table) in newTestdatabase
        描述：
           | Field            | Type           | Null | Key | Default | Extra |
           | ---------------- | -------------- | ---- | --- | ------- | ----- |
           | username         | varchar(50)    | NO   | PRI | NULL    |       |
           | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
           
           
           用途說明：
           此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
           
           | 欄位名稱              | 說明                                                                |
           | ----------------- | ----------------------------------------------------------------- |
           | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
           | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
    - own Create_UserAccount (Function) in ./application/sqldatacenter.js
      描述：
          input: (username [type:string],hashedpassword [type:string])
          
          return: a string 
          
          logic:
          mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - writes_table userHashedPassword (Table) in newTestdatabase
        描述：
           | Field            | Type           | Null | Key | Default | Extra |
           | ---------------- | -------------- | ---- | --- | ------- | ----- |
           | username         | varchar(50)    | NO   | PRI | NULL    |       |
           | hashed_password  | varchar(255)   | NO   |     | NULL    |       |
           
           
           用途說明：
           此資料表用於儲存使用者帳號及其對應的雜湊後密碼，用於登入身份驗證。系統僅保存不可逆的雜湊字串，不儲存明文密碼。每筆紀錄代表一位使用者。
           
           | 欄位名稱              | 說明                                                                |
           | ----------------- | ----------------------------------------------------------------- |
           | `username`        | 使用者帳號，為主鍵。限制長度為 50 個字元，必須唯一且不可為 NULL。此欄位用於辨識使用者身分。                |
           | `hashed_password` | 雜湊後的密碼字串。長度上限為 255 字元，建議使用 bcrypt、argon2 等安全演算法雜湊後儲存。此欄位不可為 NULL。 |
      - writes_table userinfo (Table) in newTestdatabase
        描述：
           這是一張用來記錄系統中所有使用者基本資訊的資料表，每一筆紀錄代表一位註冊用戶。
           
           user_id：使用者的唯一識別碼，為主鍵，整數型別，自動遞增。
           
           username：使用者帳號名稱，為文字型別（varchar），必須唯一、不得為空，用來辨識該用戶在系統中的公開名稱。
           
           +----------+-------------+------+-----+---------+----------------+
           | Field    | Type        | Null | Key | Default | Extra          |
           +----------+-------------+------+-----+---------+----------------+
           | user_id  | int         | NO   | PRI | NULL    | auto_increment |
           | username | varchar(50) | NO   | UNI | NULL    |                |
           +----------+-------------+------+-----+---------+----------------+
      - writes_table userLoginToken (Table) in newTestdatabase
        描述：
           這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
           
           username
           
           token：發放給該使用者的登入憑證，用於存取受保護資源。
           
           issued_at：token 發行時間，為 timestamp，預設為當下時間。
           
           expires_at：token 的過期時間，若已過期則無效，為 timestamp。
           
           created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
           
           
           +------------+--------------+------+-----+---------------------+----------------+
           | Field      | Type         | Null | Key | Default             | Extra          |
           +------------+--------------+------+-----+---------------------+----------------+
           | username   | varchar(50)  | NO   | PRI | NULL                |                |
           | token      | varchar(255) | NO   |     | NULL                |                |
           | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           | expires_at | timestamp    | YES  |     | NULL                |                |
           | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           +------------+--------------+------+-----+---------------------+----------------+
    - own logout (Function) in ./application/sqldatacenter.js
      描述：
          input :(username [type:string])
          
          
          return : (a string [type: string])
          
          logic:
          
          前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".
      - writes_table userLoginToken (Table) in newTestdatabase
        描述：
           這是一張用來記錄使用者登入狀態與 token 的資料表。每一筆紀錄代表一位使用者在某個時間點所獲頒的一組登入 token，用於驗證其登入身份。
           
           username
           
           token：發放給該使用者的登入憑證，用於存取受保護資源。
           
           issued_at：token 發行時間，為 timestamp，預設為當下時間。
           
           expires_at：token 的過期時間，若已過期則無效，為 timestamp。
           
           created_at：資料建立時間，可與 issued_at 相同，用於稽核與紀錄追蹤。
           
           
           +------------+--------------+------+-----+---------------------+----------------+
           | Field      | Type         | Null | Key | Default             | Extra          |
           +------------+--------------+------+-----+---------------------+----------------+
           | username   | varchar(50)  | NO   | PRI | NULL                |                |
           | token      | varchar(255) | NO   |     | NULL                |                |
           | issued_at  | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           | expires_at | timestamp    | YES  |     | NULL                |                |
           | created_at | timestamp    | NO   |     | CURRENT_TIMESTAMP   |                |
           +------------+--------------+------+-----+---------------------+----------------+
      - calls pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();


現在要寫的元件的描述：
just import it

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const sqldatacenter = require('./application/sqldatacenter.js');


/* ----------------prompt-----Id: filename:./application/index.js|name:path|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：path
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in path
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const path = require('path');

/* ----------------prompt-----Id: filename:./application/index.js|name:express|placeType:server|type:GlobalVariable---------------- */

/*
<START>

元件名稱：express
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in express
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const express = require('express');


/* ----------------prompt-----Id: filename:./application/index.js|name:cookie|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：cookie
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in cookie
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const cookie = require('cookie');


/* ----------------prompt-----Id: filename:./application/index.js|name:multer|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：multer
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in multer
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const multer = require('multer');


/* ----------------prompt-----Id: filename:./application/index.js|name:cookieparser|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：cookieparser
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in cookie-parser
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const cookieparser = require('cookie-parser');


/* ----------------prompt-----Id: filename:./application/index.js|name:fs|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：fs
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - module (GlobalVariable) in fs
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
just import the module

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const fs = require('fs');


/* ----------------prompt-----Id: filename:./application/index.js|name:app|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：app
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - express (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in express
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
it is an external module. no need to write it

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const app = express();


/* ----------------prompt-----Id: filename:./application/index.js|name:storage|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：storage
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - multer (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in multer
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
const storage=multer.memoryStorage();

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const storage = multer.memoryStorage();


/* ----------------prompt-----Id: filename:./application/index.js|name:upload|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：upload
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - multer (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in multer
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
const upload=multer({"storage":storage});

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const upload = multer({ storage: storage });


/* ----------------prompt-----Id: filename:./application/index.js|name:options|placeType:server|type:GlobalVariable---------------- */
/*
<START>

元件名稱：options
類型：GlobalVariable
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - fs (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in fs
      描述：
          it is an external module. no need to write it
  - /etc/letsencrypt/live/gotestapp.com/privkey.pem (server_file) in /etc/letsencrypt/live/gotestapp.com/privkey.pem
    描述：
         its is a file. No need to write it
  - /etc/letsencrypt/live/gotestapp.com/fullchain.pem (server_file) in /etc/letsencrypt/live/gotestapp.com/fullchain.pem
    描述：
         its is a file. No need to write it


現在要寫的元件的描述：
const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/gotestapp.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/gotestapp.com/fullchain.pem'),
  
};

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/gotestapp.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/gotestapp.com/fullchain.pem'),
};

/* ----------------prompt-----Id: filename:./application/index.js|name:cookieparser()|placeType:server|type:APIEndpoint[USE]---------------- */
/*
<START>

元件名稱：cookieparser()
類型：APIEndpoint[USE]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - cookieparser (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in cookie-parser
      描述：
          it is an external module. no need to write it
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.use(cookieparser());

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

app.use(cookieparser());


/* ----------------prompt-----Id: filename:./application/index.js|name:express.json()|placeType:server|type:APIEndpoint[USE]---------------- */
/*
<START>

元件名稱：express.json()
類型：APIEndpoint[USE]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - express (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in express
      描述：
          it is an external module. no need to write it
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.use(cookieparser());

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.use(express.json());


/* ----------------prompt-----Id: filename:./application/index.js|name:returnMainpage|placeType:server|type:Function---------------- */

/*
<START>

元件名稱：returnMainpage
類型：Function
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - returnMainpage (Function) in ./application/returnMainpage.js
    描述：
         input (username [type:string])


現在要寫的元件的描述：
just import it

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const returnMainpage = require('./application/returnMainpage.js');


/* ----------------prompt-----Id: filename:./application/index.js|name:post_sendlike_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_sendlike_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input: (req,res)

return:隨意

logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那就抓出req.body中的user_id和post_id來執行sqldatacenter.sendlike。如果一切成功，就res.send({"state":"success"})。如果過程中有任何失敗，例如身分驗證失敗，就res.send({"state":"fail"})。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const post_sendlike_handler = async (req, res) => {
  const { username, token } = req.cookies;

  const isVerified = await sqldatacenter.Verify_LoginToken(username, token);
  if (!isVerified) {
    res.send({ state: "fail" });
    return;
  }

  const { user_id, post_id } = req.body;
  const result = await sqldatacenter.sendlike(user_id, post_id);

  if (result === "success") {
    res.send({ state: "success" });
  } else {
    res.send({ state: "fail" });
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:post_unsendlike_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_unsendlike_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input: (req,res)

return:隨意

logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那就抓出req.body中的user_id和post_id來執行sqldatacenter.unsendlike。如果一切成功，就res.send({"state":"success"})。如果過程中有任何失敗，例如身分驗證失敗，就res.send({"state":"fail"})。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const post_unsendlike_handler = async (req, res) => {
  const { username, token } = req.cookies;

  const isVerified = await sqldatacenter.Verify_LoginToken(username, token);
  if (!isVerified) {
    res.send({ state: "fail" });
    return;
  }

  const { user_id, post_id } = req.body;
  const result = await sqldatacenter.unsendlike(user_id, post_id);

  if (result === "success") {
    res.send({ state: "success" });
  } else {
    res.send({ state: "fail" });
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:post_register_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_register_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input (req,res)

return:隨意

logic:
先去req.body拿出requestedUsername和requestedHashed_Password。使用sqldatacenter.checkuserexists來查詢requestedUsername這個名稱是否已被註冊。如果是，res.send("thisUsernameAlreadyExist")。如果不是，使用Create_UserAccount把requestedUsername和requestedHashed_Password填入，如果他回傳"success"，就res.send("success")，如果回傳"fail"，就res.send("fail")。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const post_register_handler = async (req, res) => {
  const { requestedUsername, requestedHashed_Password } = req.body;

  const alreadyExists = await sqldatacenter.checkuserexists(requestedUsername);
  if (alreadyExists) {
    res.send("thisUsernameAlreadyExist");
    return;
  }

  const result = await sqldatacenter.Create_UserAccount(requestedUsername, requestedHashed_Password);
  if (result === "success") {
    res.send("success");
  } else {
    res.send("fail");
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:post_login_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_login_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input (req,res)

return:隨意

logic
將req.body中的username和hashed_password交給sqldatacenter.Verify_HashedPassword來檢查是否正確，正確的話就sql.Write_LoginToken和req.body中的username來生成token並寫入資料庫，然後sql.Write_LoginToken的回傳結果如果成功就把結果中的token放到使用者的cookie，然後也把username放到使用者的cookie，然後res.json({"state":"success"})。而其他的情況，如密碼錯誤，或是寫入token失敗，則res.json({"state":"fail"})

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const post_login_handler = async (req, res) => {
  const { username, hashed_password } = req.body;

  const isValid = await sqldatacenter.Verify_HashedPassword(username, hashed_password);
  if (!isValid) {
    res.json({ state: "fail" });
    return;
  }

  const tokenResult = await sqldatacenter.Write_LoginToken(username);
  if (tokenResult.state === "success") {
    res.cookie("username", username);
    res.cookie("token", tokenResult.token);
    res.json({ state: "success" });
  } else {
    res.json({ state: "fail" });
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:get_givePostSuggest_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：get_givePostSuggest_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input:(req,res)

return 隨意

logic:

呼叫sqldatacenter.updateAndSendGlobalRecommendNumber，然後把他的回傳值用res.json()傳到前端

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const get_givePostSuggest_handler = async (req, res) => {
  const result = await sqldatacenter.updateAndSendGlobalRecommendNumber();
  res.json(result);
};


/* ----------------prompt-----Id: filename:./application/index.js|name:post_logout_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_logout_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".


現在要寫的元件的描述：
input (req,res)

return:隨意 

logic:
先去req.cookie拿到username和token，輸入sqldatacenter.Verify_LoginToken做檢查，檢查正確後再用sqldatacenter.logout及username做登出的動作。如果一切成功然後sqldatacenter.logout回傳"success"，就res.send("success");。其他情況則res.send("fail");。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const post_logout_handler = async (req, res) => {
  const username = req.cookies.username;
  const token = req.cookies.token;

  const isValid = await sqldatacenter.Verify_LoginToken(username, token);
  if (!isValid) {
    res.send("fail");
    return;
  }

  const result = await sqldatacenter.logout(username);
  if (result === "success") {
    res.send("success");
  } else {
    res.send("fail");
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:get_register_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：get_register_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - Registerpage.html (server_file) in Registerpage.html
    描述：
         its is a .html file. I'll write it by myself
  - path (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in path
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
input:(req,res)

logic:

res.sendFile(path.join(__dirname,'Registerpage.html'));

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const get_register_handler = (req, res) => {
  res.sendFile(path.join(__dirname, 'Registerpage.html'));
};


/* ----------------prompt-----Id: filename:./application/index.js|name:get_login_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：get_login_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - Loginpage.html (server_file) in Loginpage.html
    描述：
         its is a .html file. I'll write it by myself
  - path (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in path
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
input:(req,res)

logic:

res.sendFile(path.join(__dirname,'Loginpage.html'));

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
const get_login_handler = (req, res) => {
  res.sendFile(path.join(__dirname, 'Loginpage.html'));
};


/* ----------------prompt-----Id: filename:./application/index.js|name:post_makepost_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：post_makepost_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".
  - fs (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in fs
      描述：
          it is an external module. no need to write it
  - path (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in path
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
input: (req,res)

return:隨意

logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那利用sqldatacenter.searchuserIDbyusernameuser_id來找到user_id，以及用當下時間生成一個timestamp，一起送往sqldatacenter.generatePostId生成post_id。關於貼文的圖片呢，他是在req.file,要把req.file.buffer儲存在名為"/home/ec2-user/postsimages"的目錄下，副檔名用path.extname(req.file.originalname)然後檔名用post_id。目錄如果不存在需要自己生成喔。如果檔案寫入失敗，就結束一切，res.send("fail")。從req.body中取出article，以及已有的username和timestamp，還有圖片存放的檔案路徑，一起送往sqldatacenter.makepost函式。如果sqldatacenter.makepost回傳"success"，res.send("success")，而其餘的情況，都用res.send("fail")。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const post_makepost_handler = async (req, res) => {
  const username = req.cookies.username;
  const token = req.cookies.token;

  const isValid = await sqldatacenter.Verify_LoginToken(username, token);
  if (!isValid) {
    res.send("fail");
    return;
  }

  const user_id = await sqldatacenter.searchuserIDbyusername(username);
  if (!user_id) {
    res.send("fail");
    return;
  }

  const timestamp = Date.now();
  const post_id = sqldatacenter.generatePostId(timestamp, user_id);

  const imageDir = "/home/ec2-user/postsimages";
  const imageExt = path.extname(req.file.originalname);
  const imagePath = `${imageDir}/${post_id}${imageExt}`;

  try {
    if (!fs.existsSync(imageDir)) {
      fs.mkdirSync(imageDir, { recursive: true });
    }
    fs.writeFileSync(imagePath, req.file.buffer);
  } catch (err) {
    res.send("fail");
    return;
  }

  const result = await sqldatacenter.makepost(
    username,
    imagePath,
    req.body.article,
    timestamp.toString()
  );

  if (result === "success") {
    res.send("success");
  } else {
    res.send("fail");
  }
};


/* ----------------prompt-----Id: filename:./application/index.js|name:get_readPost_handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：get_readPost_handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".
  - fs (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in fs
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
input:(req,res)

return 隨意

logic:從req.query讀取post_id，然後用sqldatacenterreadPostByPost_id和post_id來獲取一個json物件。這個json物件我們把他叫postObject好了。從那個物件的imagepath利用fs來讀取，讀出來的東西叫做imagecontent。利用sqldatacenter.searchusernamebyuserID(post_Object.user_id)來找到作者名username。如果一切順利，
res.json({"imagecontent":imagecontent,"article":post_Object.article,"created_at":post_Object.created_at,"like_count":post_Object.like_count,"author":username})。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>

const get_readPost_handler = async (req, res) => {
  const post_id = req.query.post_id;
  if (!post_id) {
    res.json({ error: "missing post_id" });
    return;
  }

  const postObject = await sqldatacenter.readPostByPost_id(post_id);
  if (!postObject) {
    res.json({ error: "post not found" });
    return;
  }

  let imagecontent;
  try {
    imagecontent = fs.readFileSync(postObject.imagepath, { encoding: "base64" });
  } catch (e) {
    res.json({ error: "image not found" });
    return;
  }

  const username = await sqldatacenter.searchusernamebyuserID(postObject.user_id);
  if (!username) {
    res.json({ error: "author not found" });
    return;
  }

  res.json({
    imagecontent: imagecontent,
    article: postObject.article,
    created_at: postObject.created_at,
    like_count: postObject.like_count,
    author: username
  });
};

/* ----------------prompt-----Id: filename:./application/index.js|name:get__handler|placeType:server|type:EndpointHandler---------------- */
/*
<START>

元件名稱：get__handler
類型：EndpointHandler
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - sqldatacenter (GlobalVariable) in ./application/index.js
    描述：
         just import it
    - import from sqldatacenter (GlobalVariable) in ./application/sqldatacenter.js
      描述：
          let it own what it should own
      - own pool (GlobalVariable) in ./application/sqldatacenter.js
        描述：
           const pool = mysql.createPool({
               host: 'testmysql-1.crseg8qams8s.ap-southeast-2.rds.amazonaws.com',
               user: sqlusername,
               password: sqlpassword,
               database: 'testdatabase',
               waitForConnections: true,
               connectionLimit: 10,
               queueLimit: 0
           }).promise();
      - own readPostByPost_id (Function) in ./application/sqldatacenter.js
        描述：
           input:(post_id)
           
           return: ([type:json])
           
           function type: it is async
           
           logic:
           前往所提及的資料庫table搜尋該post_id對應的所有欄位內容，然後返回他。若沒東西就返回null
      - own sendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若有，直接return "alreadyExist"；若無，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own unsendlike (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int],post_id [type:int])
           
           return: ( a string [type:string])
           
           
           function type: it is async
           
           logic:
           先檢查去userlikesinfo檢查這個user_id是不是已經對此post_id按讚了。若無，直接return "neverＬikeBefore"；若有，userlikesinfo插入一個這個like，然後再去userpostsinfo根據userlikesinfo內容更新userpostsinfo中的該post_id的讚數（這個步驟中，成功就return "success"， 失敗就return "fail"）。
      - own updateAndSendGlobalRecommendNumber (Function) in ./application/sqldatacenter.js
        描述：
           input: no input
           
           return: a json array，每個element是有post_id,globalrecommendscore,user_id這三個key的json，post_id對應到string，而
           globalrecommendscore和user_id對應到int。
           
           
           function type: it is async
           
           
           logic:
           
           先去userpostsinfo把所有is_deleted=FALSE的資料的post_id, like_count, secondTime抓下來，這樣會得到一個陣列。遍歷這個陣列，計算出元素的timeSincePosted=Date.now()-element.secondTime;。把元素的like_count還有timeSincePosted交給GlobalRecommendNumberCalculator計算分數，把這個分數存到userpostsinfo中該元素的post_id的globalrecommendscore欄位。
           
           最後，去userpostsinfo把所有is_deleted=FALSE的資料的post_id,globalrecommendscore,user_id抓下來，這樣會得到一個陣列。return這個陣列。
      - own searchlike_count (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [Type:int ])
           
           function type: it is async
           
           return (a number or null [type:int])
           logic:
           先檢查input是否為空。去userpostsinfo找到該post_id對應到的like_count，若找不到則返回null。
      - own makepost (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [type string],imagepath [type:string],article [type:string],secondTime [type:string]);
           
           return: (a string [type:string])
           
           
           logic:
           do things as below. if they all succeed,then return "success";otherwise, return "false".
           
                const userID=await searchuserIDbyusername(username);
                await Appenduserpostsinfo(secondTime,userID);
                const post_id=generatePostId(secondTime,userID);
                await modifyuserpostsinfo(post_id,secondTime,article,imagepath);
           		
                await modifyuserpostsinfouserID(userID,post_id);
      - own diduserlikepost (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_id [type:int ],post_id [type:int])
           
           return: (a boolean [Type:boolean])
           
           logic: 
           前往userlikesinfo查詢有無欄位ost_id和欄位user_id都符合函數輸入的資料，有就return true，失敗或沒有就傳return false
      - own Appenduserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (timestamp [Type:int],userID [Type:int])
           
           return: (a string [type:string])
           
           logic:
           
           先用generatePostId(timestamp,userID)計算出post_id，然後把(post_id, user_id)插入userpostsinfo。插入成功要return "success", 失敗就return "fail"
      - own modifyuserpostsinfo (Function) in ./application/sqldatacenter.js
        描述：
           input: (post_id [type:int],secondTime [type:int],article[type:int],imagepath[type:int])
           
           return: (a string [type:string])
           
           
           logic:
           去userpostsinfo找到該post_id對應到的欄位，把secondTime,article,imagepath設為函數輸入值，而created_at設為FROM_UNIXTIME(?)。
           如果找不到，或是執行失敗，return "fail"，一切成功的話return "success"。
      - own searchuserIDbyusername (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: int or null
           
           logic:
           去userinfo查詢username欄位和輸入一樣的資料，返回那項資料的userID。找不到或失敗則返回null。
      - own searchusernamebyuserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (userID [type:int])
           
           return: string or null
           
           logic:
           去userinfo查詢userID欄位和輸入一樣的資料，返回那項資料的username。找不到或失敗則返回null。
      - own checkuserexists (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string])
           
           return: boolean
           
           logic:
           去userinfo查詢有無username欄位和函數輸入一樣的資料，有或查詢失敗則return true，無則return false
      - own modifyuserpostsinfouserID (Function) in ./application/sqldatacenter.js
        描述：
           input: (user_ID [Type:int],post_id [Type:int])
           
           function type: it is async
           
           return: (a string [type:string])
           logic: 去userpostsinfo找到post_id對應的user_ID，然後把user_ID欄改成函數輸入值。如果失敗或找不到對應，回傳"fail";成功就回傳"success"。
      - own Verify_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string],token [Type: string])
           
           return (true or false [Type:boolean])
           
           function type: it is async
           
           Logic:
           前往userLoginToken的對應username欄位，看看資料庫的token和函式輸入的token是否相同。相同就返回true，不相同就返回false
      - own Write_LoginToken (Function) in ./application/sqldatacenter.js
        描述：
           input:(username [Type: string])
           
           return : ( a json that contains state and token. state and token are string[Type: json])
           
           function type: it is async
           
           Logic:
           在本函式，運用jwt，還有系統時間、username，生成一個簽章，把該簽章存入userLoginToken該table中對應到函式輸入的username的那欄（如果沒有欄位就創造一個）。然後成功就在ｒｅｔｕｒｎ的那個json的state填"success"，token填剛剛的signature；失敗則state填"fail"，token填"".
      - own generatePostId (Function) in ./application/sqldatacenter.js
        描述：
           input:(timestamp [Type: int],userId [Type: int])
           
           return: (a big INT number [Type: BigInt])
           
           Logic:
           輸出的數字末十位放userId，userId前面放timestamp
      - own Write_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           since i don't need it now, just write it as am empty function
      - own Verify_HashedPassword (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: boolean
           
           logic:
           直接去userHashedPassword比對是否吻合。吻合傳true，不吻合傳false.
      - own Create_UserAccount (Function) in ./application/sqldatacenter.js
        描述：
           input: (username [type:string],hashedpassword [type:string])
           
           return: a string 
           
           logic:
           mysql資料庫的寫入使用transaction. 插入input的相關資料到userHashedPassword、userinfo、userLoginToken。如果一切都成功，回傳"success"，反之，回傳"fail".
      - own logout (Function) in ./application/sqldatacenter.js
        描述：
           input :(username [type:string])
           
           
           return : (a string [type: string])
           
           logic:
           
           前往userLoginToken，把對應到input的username對應到的欄位token值改成null.如果找不到這個欄位，或是過程失敗，return "fail"，成功則return "success".
  - returnMainpage (Function) in ./application/index.js
    描述：
         just import it
    - import from returnMainpage (Function) in ./application/returnMainpage.js
      描述：
          input (username [type:string])
  - ./application/NotloginMainpage.html (server_file) in ./application/NotloginMainpage.html
    描述：
         I should do this component by myself
  - path (GlobalVariable) in ./application/index.js
    描述：
         just import the module
    - import from module (GlobalVariable) in path
      描述：
          it is an external module. no need to write it


現在要寫的元件的描述：
input:(req,res)

return 隨意

logic:

檢查req中的cookie，如果有username和Token，就送去給sqldatacenter中的Verify_LoginToken驗證，如果成功就運用returnMainpage及username來獲取要傳送給前端的html程式碼，用res.send傳到前端。其他情況則是用res.sendFile以及path,__dirname來讀取並送出NotloginMainpage.html

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

const get__handler = async (req, res) => {
  const username = req.cookies.username;
  const token = req.cookies.token;

  if (username && token) {
    const isValid = await sqldatacenter.Verify_LoginToken(username, token);
    if (isValid) {
      const html = returnMainpage(username);
      res.send(html);
      return;
    }
  }

  res.sendFile(path.join(__dirname, 'NotloginMainpage.html'));
};


/* ----------------prompt-----Id: filename:./application/index.js|name:/sendlike|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/sendlike
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_sendlike_handler (EndpointHandler) in ./application/index.js
    描述：
         input: (req,res)
         
         return:隨意
         
         logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那就抓出req.body中的user_id和post_id來執行sqldatacenter.sendlike。如果一切成功，就res.send({"state":"success"})。如果過程中有任何失敗，例如身分驗證失敗，就res.send({"state":"fail"})。
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.post('/sendlike',post_sendlike_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.post('/sendlike', post_sendlike_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/unsendlike|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/unsendlike
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_unsendlike_handler (EndpointHandler) in ./application/index.js
    描述：
         input: (req,res)
         
         return:隨意
         
         logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那就抓出req.body中的user_id和post_id來執行sqldatacenter.unsendlike。如果一切成功，就res.send({"state":"success"})。如果過程中有任何失敗，例如身分驗證失敗，就res.send({"state":"fail"})。
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.post('/unsendlike',post_unsendlike_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

app.post('/unsendlike', post_unsendlike_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/register|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/register
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_register_handler (EndpointHandler) in ./application/index.js
    描述：
         input (req,res)
         
         return:隨意
         
         logic:
         先去req.body拿出requestedUsername和requestedHashed_Password。使用sqldatacenter.checkuserexists來查詢requestedUsername這個名稱是否已被註冊。如果是，res.send("thisUsernameAlreadyExist")。如果不是，使用Create_UserAccount把requestedUsername和requestedHashed_Password填入，如果他回傳"success"，就res.send("success")，如果回傳"fail"，就res.send("fail")。
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.post('/register',post_register_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.post('/register', post_register_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/login|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/login
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_login_handler (EndpointHandler) in ./application/index.js
    描述：
         input (req,res)
         
         return:隨意
         
         logic
         將req.body中的username和hashed_password交給sqldatacenter.Verify_HashedPassword來檢查是否正確，正確的話就sql.Write_LoginToken和req.body中的username來生成token並寫入資料庫，然後sql.Write_LoginToken的回傳結果如果成功就把結果中的token放到使用者的cookie，然後也把username放到使用者的cookie，然後res.json({"state":"success"})。而其他的情況，如密碼錯誤，或是寫入token失敗，則res.json({"state":"fail"})
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.post('/login',post_login_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

app.post('/login', post_login_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/givePostSuggest|placeType:server|type:APIEndpoint[GET]---------------- */
/*
<START>

元件名稱：/givePostSuggest
類型：APIEndpoint[GET]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - get_givePostSuggest_handler (EndpointHandler) in ./application/index.js
    描述：
         input:(req,res)
         
         return 隨意
         
         logic:
         
         呼叫sqldatacenter.updateAndSendGlobalRecommendNumber，然後把他的回傳值用res.json()傳到前端
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.get('/givePostSuggest',get_givePostSuggest_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.get('/givePostSuggest', get_givePostSuggest_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/logout|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/logout
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_logout_handler (EndpointHandler) in ./application/index.js
    描述：
         input (req,res)
         
         return:隨意 
         
         logic:
         先去req.cookie拿到username和token，輸入sqldatacenter.Verify_LoginToken做檢查，檢查正確後再用sqldatacenter.logout及username做登出的動作。如果一切成功然後sqldatacenter.logout回傳"success"，就res.send("success");。其他情況則res.send("fail");。


現在要寫的元件的描述：
app.post('/logout',post_logout_handler);

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.post('/logout', post_logout_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/register|placeType:server|type:APIEndpoint[GET]---------------- */
/*
<START>

元件名稱：/register
類型：APIEndpoint[GET]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - get_register_handler (EndpointHandler) in ./application/index.js
    描述：
         input:(req,res)
         
         logic:
         
         res.sendFile(path.join(__dirname,'Registerpage.html'));
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.get('/register',get_register_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.get('/register', get_register_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/login|placeType:server|type:APIEndpoint[GET]---------------- */
/*
<START>

元件名稱：/login
類型：APIEndpoint[GET]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - get_login_handler (EndpointHandler) in ./application/index.js
    描述：
         input:(req,res)
         
         logic:
         
         res.sendFile(path.join(__dirname,'Loginpage.html'));
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.get('/login',get_login_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/

app.get('/login', get_login_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/makepost|placeType:server|type:APIEndpoint[POST]---------------- */
/*
<START>

元件名稱：/makepost
類型：APIEndpoint[POST]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - post_makepost_handler (EndpointHandler) in ./application/index.js
    描述：
         input: (req,res)
         
         return:隨意
         
         logic: 先把req的cookie中的username和token抓出來，然後利用sqldatacenter.Verify_LoginToken來做確認。如果身分驗證正確，那利用sqldatacenter.searchuserIDbyusernameuser_id來找到user_id，以及用當下時間生成一個timestamp，一起送往sqldatacenter.generatePostId生成post_id。關於貼文的圖片呢，他是在req.file,要把req.file.buffer儲存在名為"/home/ec2-user/postsimages"的目錄下，副檔名用path.extname(req.file.originalname)然後檔名用post_id。目錄如果不存在需要自己生成喔。如果檔案寫入失敗，就結束一切，res.send("fail")。從req.body中取出article，以及已有的username和timestamp，還有圖片存放的檔案路徑，一起送往sqldatacenter.makepost函式。如果sqldatacenter.makepost回傳"success"，res.send("success")，而其餘的情況，都用res.send("fail")。
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.post('/makepost',upload.single("imagefile"),post_makepost_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.post('/makepost', upload.single("imagefile"), post_makepost_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/readPost|placeType:server|type:APIEndpoint[GET]---------------- */
/*
<START>

元件名稱：/readPost
類型：APIEndpoint[GET]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - get_readPost_handler (EndpointHandler) in ./application/index.js
    描述：
         input:(req,res)
         
         return 隨意
         
         logic:從req.query讀取post_id，然後用sqldatacenterreadPostByPost_id和post_id來獲取一個json物件。這個json物件我們把他叫postObject好了。從那個物件的imagepath利用fs來讀取，讀出來的東西叫做imagecontent。利用sqldatacenter.searchusernamebyuserID(post_Object.user_id)來找到作者名username。如果一切順利，
         res.json({"imagecontent":imagecontent,"article":post_Object.article,"created_at":post_Object.created_at,"like_count":post_Object.like_count,"author":username})。
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.get('/readPost',get_readPost_handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.get('/readPost', get_readPost_handler);


/* ----------------prompt-----Id: filename:./application/index.js|name:/|placeType:server|type:APIEndpoint[GET]---------------- */
/*
<START>

元件名稱：/
類型：APIEndpoint[GET]
檔案：./application/index.js
你唯一可以使用的外部物件(包含函式)在這裡的第一層，更深的層的元件及其描述只是說明用(說明import自哪裡或是擁有甚麼)，不能用。注意喔，不要使用這邊以外的全域變數或是存取其他物件(ex.table)：
  - get__handler (EndpointHandler) in ./application/index.js
    描述：
         input:(req,res)
         
         return 隨意
         
         logic:
         
         檢查req中的cookie，如果有username和Token，就送去給sqldatacenter中的Verify_LoginToken驗證，如果成功就運用returnMainpage及username來獲取要傳送給前端的html程式碼，用res.send傳到前端。其他情況則是用res.sendFile以及path,__dirname來讀取並送出NotloginMainpage.html
  - app (GlobalVariable) in ./application/index.js
    描述：
         it is an external module. no need to write it


現在要寫的元件的描述：
app.get('/',get__handler);
這樣寫就好。

請根據以上資訊生成此元件的功能程式碼(javascript)。就只生成這個元件喔，不要幫忙做export甚麼的，或是自己引入其他全域變數。這個軟體系統的預設背景是node.js、express、mysql

<END>
*/
app.get('/', get__handler);
